scn rcvGetRemainingAttributeProgress

int i
int m
int p

array_var currentLevel
array_var lastAttr
; array_var currentAttr
array_var lvlMult
int increase
int lastProgress
int pointsSpent
int rawPointsRemain
int pointsRemain
int bonusPoints

; Input Params
array_var lastLevel
array_var levelCurve

; Output array of attributes with progress remaining, if any.
array_var remainingProgress
Begin _Function { lastLevel levelCurve } ; Gets any attribute progress remaining that would not have been used entirely by the attribute increase on level up.
    let currentLevel := call rcvGetCurrentLevel
    let remainingProgress := ar_Construct "Array"
    set i to 0
    set p to 0
    while (i < ar_Size lastLevel["attributes"])
        if (i == Recurved.LuckAvc)
            ; don't calculate luck progress
            break;
        endif
        let lastAttr := lastLevel["attributes"][i]
        ;let currentAttr := currentLevel["attributes"][i]
        let increase := currentLevel["attributes"][i]["increase"]   ;currentAttr["value"] - lastAttr["value"]
        ;DebugPrint "recurve: rcvGetRemainingAttributeProgress Attribute: %g, Difference: %g" i increase
        ; If a attribute was increased, calculate how many attribute progress 
        ;    points were used by reading through the iLevelUpMults table
        set pointsSpent to 0
        if increase > 0
            DebugPrint "recurve: Found Increase=%g for Attribute %g. Calculating points spent." increase i
            while (m < ar_Size levelCurve["iLevelUpMults"])
                let lvlMult := levelCurve["iLevelUpMults"][m]
                ; Select the lowest used value to subtract from total progress made
                if Eval (lvlMult["value"] == increase)
                    set pointsSpent to m + 1
                    break
                endif
                let m += 1
            loop
            set m to 0
        endif
        ; Add any left over over progress points to the current level, taking in to account any points spent for attribute increases.
        let lastProgress := lastAttr["skillProgress"]
        DebugPrint "recurve: Calculated %g points spent for attribute %g. Checking last level's attribute for left over progress. LastSkillProgress=%g" pointsSpent i lastProgress
        if (lastProgress > pointsSpent)
            let bonusPoints := Recurved.SecondaryAttribBonuses[i]
            let remainingProgress[p] := ar_Construct "StringMap"
            let remainingProgress[p]["attributeCode"] := i
            set rawPointsRemain to (lastProgress - pointsSpent)
            ; Bonus points don't carry forward, so remove them
            set pointsRemain to rawPointsRemain - bonusPoints
            if (pointsRemain < 0)
                set pointsRemain to 0
            endif
            let remainingProgress[p]["progressPoints"] := pointsRemain
            DebugPrint "recurve: Calculated %g points remaining for attribute %g after removing %g secondary bonus points from %g." (remainingProgress[p]["progressPoints"]) i bonusPoints rawPointsRemain
            let p += 1
        endif
        let i += 1
    loop
    SetFunctionValue remainingProgress
End