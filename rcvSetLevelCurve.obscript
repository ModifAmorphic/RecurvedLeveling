scn rcvSetLevelCurve

int i
array_var skill
array_var lvlUpMult
string_var levelUpMultSetting
;inputs
array_var levelCurve
array_var hardCappedSkills
Begin _Function { levelCurve hardCappedSkills }
	set i to 0
	while (i < ar_Size levelCurve["iLevelUpMults"])
		let lvlUpMult := levelCurve["iLevelUpMults"][i]
		let levelUpMultSetting := lvlUpMult["setting"]
		SetNumericGameSetting $levelUpMultSetting lvlUpMult["value"]
		DebugPrint "recurve: Set %z to %g." levelUpMultSetting lvlUpMult["value"]
		let i += 1
	loop

	set i to 0
	while (i < ar_Size levelCurve["skills"])
		let skill := levelCurve["skills"][i]
		if Eval (skill["softCapEnabled"] == 1)
			SetSkillUseIncrementC skill["softCapUseExp"][0] skill["skillCode"] 0
			SetSkillUseIncrementC skill["softCapUseExp"][1] skill["skillCode"] 1
		endif
		let i += 1
	loop
	DebugPrint "recurve: Set iLevelUpSkillCount to %g." levelCurve["iLevelUpSkillCount"]
	SetNumericGameSetting "iLevelUpSkillCount" levelCurve["iLevelUpSkillCount"]
	
	set i to 0
	while (i < ar_Size hardCappedSkills)
		SetSkillUseIncrementC 0 hardCappedSkills[i]["skillCode"] 0
		SetSkillUseIncrementC 0 hardCappedSkills[i]["skillCode"] 1
		DebugPrint "recurve: Set skill use increment to 0 for hard capped skill %g for reason %g." (hardCappedSkills[i]["skillCode"]) (hardCappedSkills[i]["reason"])
		let i += 1
	loop
	set i to 0
End