scn rcvRecurveData
; ## Constants ##
;; Attribute "Constants"
int StrengthAvc
int EnduranceAvc
int SpeedAvc
int AgilityAvc
int PersonalityAvc
int IntelligenceAvc
int WillpowerAvc
int LuckAvc
int HealthAvc
int MagickaAvc
int FatigueAvc

;; Skill constants
int BlockAvc
int HeavyArmorAvc
int LightArmorAvc
int BlockIndex
int HeavyArmorIndex
int LightArmorIndex

;; Override reasons
int OverrideReasonOverlevel
int OverrideReasonAttributeProtection
int OverrideReasonWeapon

; Event Types
int EventTypeGameRestarted
int EventTypeGameLoaded
int EventTypeGlobalTickReset
int EventTypeLevelUp
int EventTypeSkillChange

; ### Ini variables  ###
;; Major Overage Prevention temporarily caps major skill increases for governing attributes 
;;; that have reached the max for the current level until 3 attributes have been maxed.
;;; Disabling this allows Major Attributes to always increase.
short AttributeProtectionDisabled
;; Disables soft caps on minor skills
short MinorSkillSoftCapsDisabled
;; Disables additional bonus progress points towards attribute increases 
;;; when major skills increase in level
short AttributeBonusDisabled
;; Disables increases Major skills will contribute Secondary Attribute Bonuses
short SecondaryAttributesDisabled
;; Disables carrying over of remaining Attribute progress from the previous level
short RemainingAttributeProgressDisabled
;; Disables normalization of endurance for health increase calculations.
;;; Without this enabled, a character could end up with considerably less life under the default
;;; config than typical with vanilla. The inverse is also true if the TierXMaxAttributeUp values 
;;; are adjusted to allow for larger attribute gains early on.
short EnduranceHealthNormalizationDisabled
;; Disables bonus experience on damage recieved for Light and Heavy Armor skills.
short ArmorExpFromDamageDisabled
;; Disables normalization of on hit experience for Blade and Blunt weapons.
;;; When enabled, uses weapon speed of each weapon to calculate the 
;;; experience per hit. Per hit experience increases as weapon speed decreases,
;;; causing all weapons to generate the same amount of experience over time.
short WeaponExpNormalizedDisabled
;; Disables extra experience gained from Magicka spent.
short SpellExpFromMagickaDisabled
;; Stops "Recurved Effects" for skill experience penalties from being added to the Active Effects tab in game
short RecurvedEffectsDisabled
;; Prevents "difficulty with skill X" messages from showing in the upper left hand corner of the screen
short RecurvedMessagesDisabled
;; Debugging
short DebugEnabled

; Major Skills - Over leveling protection

;; Exponent for increasing major experience requirements that have maxed their governing attribute's
;; bonus and enough major skill ups have occured for the full attribute increase. Penalty is removed
;; when a 3rd full attribute increase is acheived or the character is leveled. 
int Tier1OverageProtectionExponent
int Tier2OverageProtectionExponent
int Tier3OverageProtectionExponent
int Tier4OverageProtectionExponent
int Tier5OverageProtectionExponent

;; Guards against missed attribute increases during level ups.
;; Will stop all major experience gains one progress point (skill level) before
;; level up if you have not obtained the minimum amount of maxed attribute bonus points*
;; configured with this setting.
;; * The minimum amount will automatically be lowered to account for fully maxed (100) attributes.
;;; 0  : Disables this feature.
;;; 1  : Requires at least 1 maxed attribute prior to level up
;;; 2  : Requires at least 2 maxed attributes. Use for leveling up 2 attributes and luck.
;;; 3  : (Default) Requires 3 maxed attributes before leveling.
int MinimumMaxedAttributes

;;; The "Anti-rat" experience setting. Bonus Experience for armor and block skills is calculated by on comparing the damage from 
;;; an attack to the value of ExpNormalizedReceivedDamage and multiplying the difference times the baseline experience per 
;;; hit amount (1.25 for heavy armor and block, 1.5 for light armor). Any attack higher than the ExpNormalizedReceivedDamage value will 
;;; grant additional bonus experience. Lower damage attacks will grant no extra experience. 
;;; To summarize, a lower (but higher than zero) ExpNormalizedReceivedDamage value will grant more experience overall.
;;; 0  - Disables Exp increases from damage received
;;; 1+ - Increases experience for attacks higher than this value
float ExpNormalizedReceivedDamage

;;; Base weapon speed to normalize all other weapon speeds to in order to calculate the 
;;; experience per hit. Per hit experience increases as weapon speed decreases,
;;; causing all weapons to generate the same amount of experience over time.
;;; By default, set to the fastest weapon (daggers) - 1.4 attacks per second.
float ExpNormalizedWeaponSpeed

;;; Damage to normalize weapons against for experience gains. Higher damage weapons earn more 
;;; exp per hit to componsate for less attacks prior to target death. Works in combination with
;;; ExpNormalizedWeaponSpeed to calculate a base DPS in which all other weapons are normalized 
;;; against. The lower the value, the higher the experience increase will be for higher dps weapons.
;;; [Weapon Exp Per Hit] = (Equipped Weapon Damage x Speed) /  (ExpNormalizedWeaponDamage * ExpNormalizedWeaponSpeed) * [Normalized Weapon Skill Exp Per Use]
;;; By default, set to the worst weapon (rusty dagger) - 3 damage.
;;;; 0  - Disables Exp increases from damage
;;;; 1+ - Damage to normalize exp gains against.
float ExpNormalizedWeaponDamage

;;; Similar to ExpNormalizedWeaponDamage but for bows. Only uses damage in the comparison, as all
;;; bows have the same speed. Bows with higher damage will grant more exp per hit.
;;;; 0  - Disables Exp increases from damage
;;;; 1+ - Damage to normalize exp gains against.
float ExpNormalizedBowDamage

;;; A dial for turning up or down spell experience from magicka spent. Doubles the experience
;;;; every time the amount doubles. Example: Setting to 10 doubles the experience bonus from 5.
;;;; Formula:
;;;; [Max Bonus Exp] = [Base Exp Req] / ([Skill Level] / SpellExpFromMagickaModifier)
float SpellExpFromMagickaModifier

;;; Multiplies experience gain for every skill in the game by this amount.
;;; Originaly added this to QA my mod, as leveling a character through 50 levels multiple times
;;; at the normal pace get's old.
float AllExperienceMultiplier

;;; The Magic Effect Abbreviation (https://cs.uesp.net/wiki/Magic_Effects_List) that Recurved leveling effects
;;; will be displayed under.
;;; BRDN (Burden) - Default. All recurved skill softcaps / progress penalties will be listed under this effect
;;; DRAT (Drain Attribute) - Groups skill exp penalties into a Drain {Attribute} for their governing attribute
;;; DRSK (Drain Skill) - A Drain {Skill} effect is added to active effects for every skill currently under an exp penalty
;;; DARK (DO NOT USE - Darkness) - Groups all skill exp penalties under an effect named "Recurved Effects".* 
;;;; *DARK is not the default because of the "DO NOT USE" name and concerns about compatibility
string_var MagicEffectDisplayAbbr

; ## Level Scaling Settings ##
;; Increases amount of experience required to level a skill past the soft cap. 
float SoftCapMulti

;; Controls what percentage of each remaining attribute progress is brought over to the next level.
;; Vanilla does not bring any unused points over to the next level.
;; Set this to a value less than 1 unless you want to be swimming in attribute progress points in a few levels.
float RemainingAttributeProgressPerc

;; Controls when level tiers start and end.
int Tier1StartLevel
int Tier2StartLevel
int Tier3StartLevel
int Tier4StartLevel
int Tier5StartLevel
;; Sets attribute points gained per level up for a tier
int Tier1MaxAttributeUp
int Tier2MaxAttributeUp
int Tier3MaxAttributeUp
int Tier4MaxAttributeUp
int Tier5MaxAttributeUp
;; Major Skills increases required for a level up
int Tier1LevelUpSkillIncs
int Tier2LevelUpSkillIncs
int Tier3LevelUpSkillIncs
int Tier4LevelUpSkillIncs
int Tier5LevelUpSkillIncs
;; Adds additonal progress points On Major skill ups
int Tier1MajorAttributeBonus
int Tier2MajorAttributeBonus
int Tier3MajorAttributeBonus
int Tier4MajorAttributeBonus
int Tier5MajorAttributeBonus
;; Increases an attribute's secondary attribute progress on Major skill increase. Has no effect if SecondaryAttributesDisabled is set.
int Tier1SecondaryAttributeBonus
int Tier2SecondaryAttributeBonus
int Tier3SecondaryAttributeBonus
int Tier4SecondaryAttributeBonus
int Tier5SecondaryAttributeBonus
;; Maps a skill's governing attribute to a secondary attribute to increase.
int StrengthSecondary
int EnduranceSecondary
int SpeedSecondary
int AgilitySecondary
int PersonalitySecondary
int IntelligenceSecondary
int WillpowerSecondary

;; Converts endurance increases to the normalized amount when calculating health increases on level ups. This is done
;; to compensate for the lower attribute inceases in lower levels.
int Tier1EnduranceNormalizeAmount
int Tier2EnduranceNormalizeAmount
int Tier3EnduranceNormalizeAmount
int Tier4EnduranceNormalizeAmount
int Tier5EnduranceNormalizeAmount

; ## Messege Settings ##

; Time to wait between when messages are shown
int MessageWaitSeconds
; Event must have occured within X seconds for it to be shown
int MessageWindowSeconds

; ## Internal Settings
int EventExpirationSeconds

; ### End Ini variables  ###

;;; Contains the secondary's above indexed by primary attribute code for lookups.
array_var AttributeSecondaries

; End External ini variables
array_var DefaultSkillUseIncrements

; Persistant Arrays for tracking Levels
array_var Levels
array_var LevelCurves
; Skils that are temporarily capped once their governing attribute has enough progress points.
array_var SkillUseOverrides

; ; Flag for when character has a level pending
; short LevelPending
; Flag for delayed rest of level progress back to the maximum
short DelayedResetLevelProgress

;; Level Data - Reset on Level Up
; Amount of attribute progress over the max needed for the next level
int ExcessAttributeProgress

;; Flag for when attribute failsafe is enable. Used for messaging
short AttributeFailsafeEnabled

; Keeps track of attribute bonuses for the level
array_var SecondaryAttribBonuses

; Used for tracking last known experience values to add bonus armor skill experience
array_var DefenseEquipExp

; Tracks last spell cast to avoid duplicating bonus exp for spells with multiple effects
int LastCastTick
ref LastSpellCast

; History of events, used mostly for messaging
array_var EventHistory

; Internal Setting for controlling pruning of stale events so they don't clog up the save file
int EventExpirationTicks

; short WeaponEquipped

; Debug "Commands"
int DumpLevel
short DumpCurrentLevel
int DumpLevelCurve
short ResetSkillUseOverrides
short GetNormalizedEndurance
int SetNormalizedEndurance
int SetHealth