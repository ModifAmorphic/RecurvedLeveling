scn rcvProcessSkillIncrease

short isMajorSkill
int attributeCode
int attributeProgress
int majorAttrBonus
int secondaryAttrbCode
int secondaryAttrProgress
int secondaryAttrBonus
int maxLvlProgress
int lvlProgress
int newLvlProgress


short isSkillsCapped
; params
int skillActorValueCode
int amount
short isScripted
Begin _Function { skillActorValueCode amount isScripted } ; Listens to Skill Up events and capture attribute progress if needed.
	
    set isMajorSkill to player.IsClassSkillC skillActorValueCode
    let isSkillsCapped := call rcvApplyOverLevelProtection skillActorValueCode amount isScripted
    if isSkillsCapped
        if (Recurved.OverlevelMsgShown == 0)
            MessageBoxEx Recurved.OverlevelMessage
            set Recurved.OverlevelMsgShown to 1
        endif
    elseif (isScripted == 0)
        call rcvApplyOverageProtection skillActorValueCode amount
    endif
    ; Process Major Skills
	if isMajorSkill
        set attributeCode to GetSkillGoverningAttributeC skillActorValueCode
        ; Process Bonus Attribute progress for Major Skill increases that weren't scripted
        if (isScripted == 0)
            if (Recurved.AttributeBonusDisabled == 0)
                set attributeProgress to GetPCAttributeBonusC attributeCode 
                let majorAttrBonus := Recurved.LevelCurves[player.GetLevel - 1]["MajorAttributeBonus"]
                DebugPrint "recurve: Skill %g is a major skill and will increase attribute %g progress %g by an additional %g." skillActorValueCode attributeCode attributeProgress majorAttrBonus
                SetPCAttributeBonusC attributeCode attributeProgress + majorAttrBonus
            endif
            
            ; Increase secondary attribute bonus if enabled
            if (Recurved.SecondaryAttributesDisabled == 0)
                let secondaryAttrbCode := Recurved.AttributeSecondaries[attributeCode]
                set secondaryAttrProgress to GetPCAttributeBonusC secondaryAttrbCode
                let secondaryAttrBonus := Recurved.LevelCurves[player.GetLevel - 1]["SecondaryAttributeBonus"]
                DebugPrint "recurve: Skill %g is a major skill and will increase it's secondary attribute %g progress %g by %g." skillActorValueCode secondaryAttrbCode secondaryAttrProgress secondaryAttrBonus
                SetPCAttributeBonusC secondaryAttrbCode secondaryAttrProgress + secondaryAttrBonus
            endif
		endif

        ; Get the current level progress before skill up
        set lvlProgress to GetPCMajorSkillUps
        ; Get to be level progress
        let newLvlProgress := lvlProgress + amount
        ; Attribute progress needed for the current level
        set maxLvlProgress to GetGameSetting "iLevelUpSkillCount"

		; Snapshot current level before levelup happens
		if (newLvlProgress == maxLvlProgress) || (isScripted && lvlProgress < maxLvlProgress && newLvlProgress >= maxLvlProgress)
			let Recurved.Levels[player.GetLevel - 1] := call rcvGetCurrentLevel
			let Recurved.LevelCurves[player.GetLevel - 1] := call rcvGetLevelCurve player.GetLevel
            DebugPrint "recurve: Skill %g increase will cause level up. Snapshotted level and level curve." skillActorValueCode
            ; Manually add skill progress because Scripted Skill Up events are
            ; invoked before the skill is modified
            if (isScripted)
                let Recurved.Levels[player.GetLevel - 1]["attributes"][attributeCode]["skillProgress"] := attributeProgress + amount
            endif
		endif
	endif
	
	set RecurvedController.hasUpdate to 1
End