scn rcvPreventOverLevel

int i

; Overlevel variables
int lvlProgress
;int overLvlProgress
int maxLvlProgress
int maxAttrbProgOver
int overLvlProgress
array_var currentCurve
array_var nextCurve
array_var allSkills

; inputs
int addedLevelProgress ; The amount additional progress to add to the existing progress for calculating overlevel protections.
int isScripted         ; Whether or not the increase was caused by a scripted event.

; Outputs
short overlevelPrevented

Begin _Function { addedLevelProgress isScripted }

	set lvlProgress to GetPCMajorSkillUps
	if (isScripted == 0)
		let lvlProgress += addedLevelProgress
	endif
	; Attribute progress needed for the current level
	let currentCurve := call rcvGetLevelCurve player.GetLevel 0
	let maxLvlProgress := currentCurve["iLevelUpSkillCount"]
	; Attribute progress needed for the level after this, minus 1
	let nextCurve := call rcvGetLevelCurve (player.GetLevel + 1) 0
	let maxAttrbProgOver := nextCurve["iLevelUpSkillCount"] - 1
	DebugPrint "recurve: Starting OverLevel protection processing. Calculated Level Progress: %g/%g. ExcessAttributeProgress: %g" lvlProgress maxLvlProgress Recurved.ExcessAttributeProgress
	if (lvlProgress > maxLvlProgress || Recurved.ExcessAttributeProgress > 0)
		set overLvlProgress to lvlProgress - maxLvlProgress
		DebugPrint "recurve: ExcessAttributeProgress=%g, maxAttrbProgOver=%g." Recurved.ExcessAttributeProgress maxAttrbProgOver
		if (Recurved.ExcessAttributeProgress + overLvlProgress >= maxAttrbProgOver)
			DebugPrint "recurve: Maximum attribute progress over the next level reached. Hardcapping all skill progress until next rest."
			; reset Recurved.SkillUseOverrides since we're about to block every skill from gaining progress
			let Recurved.SkillUseOverrides := ar_Construct "Array"
			; Hardcap all skills
			let allSkills := ar_Construct "Array"
			set i to 12
			while (i < 33)
				ar_Append allSkills i
				call rcvAddSkillUseIncOverride i 0 0 Recurved.OverrideReasonOverlevel
				let i += 1
			loop
			set overlevelPrevented to 1
		endif
		; Increment the ExcessAttributeProgress so it can be added back later
		let Recurved.ExcessAttributeProgress += overLvlProgress
		; Limit the level progress to the max to prevent adding to the next level
		if (isScripted)
			DebugPrint "recurve: Overlevel Protection - Reseting level progress to %g/%g from %g/%g. Stashed excess progress increases: %g." maxLvlProgress maxLvlProgress lvlProgress maxLvlProgress Recurved.ExcessAttributeProgress
			SetPCMajorSkillUps maxLvlProgress
		elseif (addedLevelProgress > 0)
			DebugPrint "recurve: Overlevel Protection - Requesting delayed reset of level progress to %g/%g from %g/%g. Stashed excess progress increases: %g." maxLvlProgress maxLvlProgress lvlProgress maxLvlProgress Recurved.ExcessAttributeProgress
			set Recurved.DelayedResetLevelProgress to 1
		endif
	endif

	DebugPrint "recurve: PreventOverlevel processed for addedLevelProgress: %g, Progress: %g/%g, maxAttrbProgOver: %g, ExcessAttributeProgress: %g, isScripted: %g, overLvlProgress: %g." addedLevelProgress lvlProgress maxLvlProgress maxAttrbProgOver Recurved.ExcessAttributeProgress isScripted overLvlProgress
	SetFunctionValue overlevelPrevented
	
End