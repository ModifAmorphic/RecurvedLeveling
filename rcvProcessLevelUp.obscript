scn rcvProcessLevelUp

int i

Begin _Function { }
	DebugPrint "recurve: Processing level up to level %g." player.GetLevel
	; Apply any attribute progress overages to the new level
	if (Recurved.ExcessAttributeProgress > 0)
		DebugPrint "recurve: Setting level progress to previous level excess of %g." Recurved.ExcessAttributeProgress
		SetPCMajorSkillUps Recurved.ExcessAttributeProgress
	endif
	; reset excess attribute progress
	set Recurved.ExcessAttributeProgress to 0
	; Carry over any left over progress points from the previous level and apply.
	if (Recurved.RemainingAttributeProgressDisabled == 0)
		call rcvSetLevelProgress
		; reset attribute bonus data
		while (i < 7)
			let Recurved.SecondaryAttribBonuses[i] := 0
			let i += 1
		loop
	endif
	; clear any skill use overrides set for the previous level and reinit the array
	; let Recurved.SkillUseOverrides := ar_Construct "Array"
	set Recurved.AttributeFailsafeEnabled to 0
	; set current level
	let Recurved.Levels[player.GetLevel - 1] := call rcvGetCurrentLevel

	DebugPrint "recurve: Loaded level data for current level, level curves for current and next level."
	; Normalize health for the level
	if (Recurved.EnduranceHealthNormalizationDisabled == 0)
		call rcvApplyHealthNormalization player.GetLevel
	endif

	; refresh with health normalization changes
	let Recurved.Levels[player.GetLevel - 1] := call rcvGetCurrentLevel

	call rcvNullPreviousLevels
End