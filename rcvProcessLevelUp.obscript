scn rcvProcessLevelUp

int i

Begin _Function { }
	DebugPrint "recurve: Processing level up to level %g." player.GetLevel
	; Apply any attribute progress overages to the new level
	; Removed because MajorSkillUps are no longer reset back on every skill up over the progress level
	; if (Recurved.ExcessAttributeProgress > 0)
	; 	DebugPrint "recurve: Setting level progress to previous level excess of %g." Recurved.ExcessAttributeProgress
	; 	SetPCMajorSkillUps Recurved.ExcessAttributeProgress
	; endif
	; reset excess attribute progress
	;set Recurved.ExcessAttributeProgress to 0
	; Carry over any left over progress points from the previous level and apply.
	if (Recurved.RemainingAttributeProgressDisabled == 0)
		call rcvSetLevelProgress 1
		; (removed) reset attribute bonus data
		;; Cleared during to prelevel. These attribute bonuses are now for the current level and should be preserved
		; while (i < 7)
		; 	let Recurved.PrimaryAttribBonuses[i] := 0
		; 	let Recurved.SecondaryAttribBonuses[i] := 0
		; 	let i += 1
		; loop
	endif
	set Recurved.AttributeFailsafeEnabled to 0
	; set current level
	let Recurved.Levels[player.GetLevel - 1] := call rcvGetCurrentLevel

	DebugPrint "recurve: Loaded level data for current level, level curves for current and next level."
	; Normalize health for the level
	if (Recurved.EnduranceHealthNormalizationDisabled == 0)
		call rcvApplyHealthNormalization player.GetLevel
	endif

	; refresh with health normalization changes
	let Recurved.Levels[player.GetLevel - 1] := call rcvGetCurrentLevel

	; remove older levels and curves
	call rcvNullPreviousLevels

	; record the event in history
	call rcvAddEvent Recurved.EventTypeLevelUp (player.GetLevel) 0 ar_Null
End