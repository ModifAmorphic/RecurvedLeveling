scn rcvAddAttributeGuards

; locals
int i
int attrIndex
int skillCode
int skillValue
int attribSkillCount
int maxLvlProgress
float progressRatio
float expReducer
array_var majorSkills


; inputs
array_var attributes        ; Attributes whose Major Skills should have skill use overrides added
int lvlProgress             ; Current progress towards next level
float skillIncsForMaxAttrib ; skill increases required for a maximized attribute bonus
array_var levelCurve        ; Level curve data
; output
array_var skillsModified  ; Array of skill codes who have had the prevention multiplier applied to their use experience increments.
Begin _Function { attributes lvlProgress skillIncsForMaxAttrib levelCurve } ; Adds skill use overrides to the Recurved.SkillUseOverrides array for skills goverened by each attribute in the passed attributes argument
	let maxLvlProgress := levelCurve["iLevelUpSkillCount"]
	; Calculate the ratio of level progress.
	;; Remove the skillIncsForMaxAttrib amount since we don't start penalizing experience
	;; until that threshold is hit.
	;;;                  (    12         -        5           + 1) / (15 - 5)
	let progressRatio := (lvlProgress - skillIncsForMaxAttrib + 1) / (maxLvlProgress - skillIncsForMaxAttrib)
	; experience reduction calulation
	set expReducer to 1
	if (progressRatio > 0)
		let expReducer := 1 / ((progressRatio + 1)^(levelCurve["OverageProtectionExponent"]))
	endif
	let skillsModified := ar_Construct "Array"
	while (attrIndex < ar_Size attributes)
		let majorSkills := call rcvGetAttributeMajorSkills attributes[attrIndex]
		let attribSkillCount := ar_Size majorSkills
		DebugPrint "recurve: Found %g Major Skills for Attribute %g." attribSkillCount attributes[attrIndex]
		set i to 0
		while (i < attribSkillCount)
			let skillCode := majorSkills[i]["code"]
			let skillValue := player.GetBaseAv3C skillCode
			if (skillValue < 100)
				call rcvAddSkillUseIncOverride skillCode expReducer expReducer Recurved.OverrideReasonAttributeGuard
				DebugPrint "recurve: Attribute Guard added use exp overrides for skill %g, attribute %g. Experience Multiplier: %g. skillIncsForMaxAttrib: %g" skillCode attributes[attrIndex] expReducer skillIncsForMaxAttrib
				ar_Append skillsModified skillCode
			else
				DebugPrint "recurve: Excluding maxed skill %v {%g} from attribute guard." skillCode skillCode
			endif
			let i += 1
		loop
		let attrIndex += 1
	loop

	SetFunctionValue skillsModified
	
End