scn rcvLoadData

; internal
; short skillCode
; string_var skillName
; float useInc1
; float useInc2
; int softCap
int i


; params
short isGameRestarted
short isGameLoaded
Begin _Function { isGameLoaded isGameRestarted }

	if isGameLoaded == 0
		return
	endif
	
	; Capture default skill use increments on startup
	if isGameRestarted
		let Recurved.DefaultSkillUseIncrements := call rcvGetSkillUseIncrements
		let Recurved.SkillMinimums := call rcvGetSkillMinimums
		
		if Eval ((ar_size Recurved.Levels) == -1)
			let Recurved.Levels := ar_Construct Array
			; Populate the levels array with nulls for 
			; levels the mod wasn't installed for
			set i to 0
			while (i < player.GetLevel - 1)
				let Recurved.Levels[i] := ar_Null
				let i += 1
			loop
			;let Recurved.Levels[player.GetLevel - 1] := call rcvGetCurrentLevel
		endif
		if Eval ((ar_size Recurved.LevelCurves) == -1)
			let Recurved.LevelCurves := ar_Construct Array
			; Populate the levels array with nulls for 
			; levels the mod wasn't installed for
			set i to 0
			while (i < player.GetLevel - 1)
				let Recurved.LevelCurves[i] := ar_Null
				let i += 1
			loop
		endif
	endif
	
	; let Recurved.Skills := call rcvGetSkills
	; let Recurved.MajorSkills := Recurved.Skills["major"]
	; let Recurved.MinorSkills := Recurved.Skills["minor"]
		
;	PrintToConsole "RecurvedGetSkills: Major Skills:"
;	let i := 0
;	while (i < ar_size MajorSkills)
;		let skillCode := MajorSkills[i]["code"]
;		let skillName := MajorSkills[i]["name"]
;		let useInc1 := MajorSkills[i]["useIncrements"][0]
;		let useInc2 := MajorSkills[i]["useIncrements"][1]
;		PrintToConsole "recurve:     %z (%g) | Use 1: %.2f, Use 2: %.2f" skillName skillCode useInc1 useInc2
;		let i += 1
;	Loop
	; PrintToConsole "RecurvedGetSkills: Minor Skills:"
	; let i := 0
	; while (i < ar_size MinorSkills)
	; 	let skillCode := MinorSkills[i]["code"]
	; 	let skillName := MinorSkills[i]["name"]
	; 	let useInc1 := MinorSkills[i]["useIncrements"][0]
	; 	let useInc2 := MinorSkills[i]["useIncrements"][1]
	; 	let softCap := MinorSkills[i]["softCap"]
	; 	PrintToConsole "recurve:     %z (%g) | Use 1: %.2f, Use 2: %.2f, SoftCap: %g" skillName skillCode useInc1 useInc2 softCap
	; 	let i += 1
	; Loop
	
	; if isGameRestarted
	; 	SetSkillUseIncrementC .35 19 0
	; endif

	; PrintToConsole "RecurvedGetSkills: Minor Skills (Curved):"
	; let i := 0
	; while (i < ar_size MinorSkills)
	; 	let skillCode := MinorSkills[i]["code"]
	; 	let skillName := MinorSkills[i]["name"]
	; 	let useInc1 := MinorSkills[i]["useIncrements"][0]
	; 	let useInc2 := MinorSkills[i]["useIncrements"][1]
	; 	let softCap := MinorSkills[i]["softCap"]
	; 	PrintToConsole "recurve:     %z (%g) | Use 1: %.2f, Use 2: %.2f, SoftCap: %g" skillName skillCode useInc1 useInc2 softCap
	; 	let i += 1
	; Loop

End