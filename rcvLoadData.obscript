scn rcvLoadData

int i


; params
short isGameRestarted
short isGameLoaded
Begin _Function { isGameLoaded isGameRestarted } ; Initializes and loads Recurved quest variables.

	if isGameLoaded == 0
		return
	endif
	
	; Capture default skill use increments on startup
	if isGameRestarted
		let Recurved.DefaultSkillUseIncrements := call rcvGetSkillUseIncrements		
	endif

	; Initialize Recurved.Levels and Recurved.LevelCurves arrays on game load.
	if Eval ((ar_size Recurved.Levels) == -1)
		let Recurved.Levels := ar_Construct "Array"
		; Populate the levels array with nulls for 
		; levels the mod wasn't installed for
		set i to 0
		while (i < player.GetLevel - 1)
			let Recurved.Levels[i] := ar_Null
			let i += 1
		loop
		DebugPrint "recurve: Initializing Recurved.Levels array. Inserted %g null records." i
		;let Recurved.Levels[player.GetLevel - 1] := call rcvGetCurrentLevel
	endif
	if Eval ((ar_size Recurved.LevelCurves) == -1)
		let Recurved.LevelCurves := ar_Construct "Array"
		; Populate the levels array with nulls for 
		; levels the mod wasn't installed for
		set i to 0
		while (i < player.GetLevel - 1)
			let Recurved.LevelCurves[i] := ar_Null
			let i += 1
		loop
		DebugPrint "recurve: Initializing Recurved.LevelCurves array. Inserted %g null records." i
	endif
	set i to 0
	
	if Eval ((ar_size Recurved.SkillUseOverrides) == -1)
		let Recurved.SkillUseOverrides := ar_Construct "Array"
		DebugPrint "recurve: Initializing Recurved.SkillUseOverrides array."
	endif

	if Eval ((ar_Size Recurved.SecondaryAttribBonuses) == -1)
		let Recurved.SecondaryAttribBonuses := ar_Construct "Array"
		set i to 0
		while (i < 7)
			let Recurved.SecondaryAttribBonuses[i] := 0
			let i += 1
		loop
		DebugPrint "recurve: Initializing Recurved.SecondaryAttribBonuses array."
	endif

	; Null and previous level and level curve array values that are no longer needed
	;; reduce save bloat
	call rcvNullPreviousLevels

	; set current level if not already added
	if Eval(player.GetLevel > (ar_Size Recurved.Levels))
		let Recurved.Levels[player.GetLevel - 1] := call rcvGetCurrentLevel
		DebugPrint "recurve: Loaded level data for current level."
	endif

	call rcvCaptureDefenseEquipExp
	set Recurved.LastCastTick to 0
	set Recurved.LastSpellCast to 0

End