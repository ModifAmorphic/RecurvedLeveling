scn rcvAddEvent

array_var newEvent

; inputs
int eventType
int data
Begin _Function { eventType data }
    let newEvent := ar_Construct "StringMap"
    let newEvent["eventType"] := eventType
    let newEvent["tick"] := RecurvedController.GlobalTick
    let newEvent["data"] := data
    ar_Append Recurved.EventHistory newEvent

    if (eventType == Recurved.EventTypeGameRestarted)
        DebugPrint "recurve: New Event added { eventType=%g (GameRestarted), tick=%g, data=%g }" newEvent["eventType"] newEvent["tick"] newEvent["data"]
    elseif(eventType == Recurved.EventTypeGameLoaded)
        DebugPrint "recurve: New Event added { eventType=%g (GameLoaded), tick=%g, data=%g }" newEvent["eventType"] newEvent["tick"] newEvent["data"]
    elseif(eventType == Recurved.EventTypeGlobalTickReset)
        DebugPrint "recurve: New Event added { eventType=%g (GlobalTickReset), tick=%g, data=%g }" newEvent["eventType"] newEvent["tick"] newEvent["data"]
    elseif(eventType == Recurved.EventTypeLevelUp)
        DebugPrint "recurve: New Event added { eventType=%g (LevelUp), tick=%g, data=%g }" newEvent["eventType"] newEvent["tick"] newEvent["data"]
    elseif(eventType == Recurved.EventTypeSkillChange)
        DebugPrint "recurve: New Event added { eventType=%g (SkillChange), tick=%g, data=%g }" newEvent["eventType"] newEvent["tick"] newEvent["data"]
    elseif(eventType == Recurved.EventTypeAttributeProtection)
        DebugPrint "recurve: New Event added { eventType=%g (AttributeProtection), tick=%g, data=%g }" newEvent["eventType"] newEvent["tick"] newEvent["data"]
    else
        DebugPrint "recurve: New Event added { eventType=%g (Unknown), tick=%g, data=%g }" newEvent["eventType"] newEvent["tick"] newEvent["data"]
    endif

End