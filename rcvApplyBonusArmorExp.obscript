scn rcvApplyBonusArmorExp

array_var skills
int i
int armorSkill
;long damage
long normalizedDamage
;ref attackerWeapon
float damageRatio
float defTypeExpReduction
float bonusExp
float defaultUseIncrement
float useIncrement
float useExpMod
float bonusUses
string_var skillName
array_var levelCurve
; inputs
ref attacker
float rawDamage
float healthDamage
Begin Function { attacker rawDamage healthDamage }

	; Determine attack damage
	;; Doesn't always work (humanoides for example)
	; if (attacker.CreatureUsesWeaponAndShield)
	; 	set attackerWeapon to attacker.GetEquippedObject 16
	; 	if (attackerWeapon)
	; 		set damage to GetAttackDamage attackerWeapon
	; 	endif
	; endif
	;; Just always check for a weapon to use as damage first, then check attacker's damage
	;; If all else fails, use the health damage received.
	; set attackerWeapon to attacker.GetEquippedObject 16
	; if (attackerWeapon)
	; 	set damage to GetAttackDamage attackerWeapon
	; endif
	; if (damage == 0)
	; 	set damage to attacker.GetAttackDamage
	; endif
	; if (damage == 0 )
	; 	DebugPrint "recurve: Could not determine attacker's attack damage. Using health damage received (%.2f) instead." healthDamage
	; 	set damage to healthDamage
	; endif
	;let damage := abs damage
	let levelCurve := call rcvGetLevelCurve player.GetLevel 0 0
	let normalizedDamage := levelCurve["normalizedWeaponExp"]["melee"]["damage"]
	if (rawDamage <= normalizedDamage)
		DebugPrint "recurve: Raw Attack damage (%.2f) is less than ExpNormalizedReceivedDamage (%.2f). No bonus exp awarded." rawDamage normalizedDamage
		return
	endif

	; Determine which type of armor was hit by looking for experience increases to their skills
	let skills := call rcvGetChangedDefEquipExp
	if Eval((ar_Size skills) > 0)
		set i to 0
		while (i < ar_Size skills)
			let armorSkill := skills[i]		
			; Calculate ratio of damage received to ExpNormalizedReceivedDamage, then divide by 10
			set defTypeExpReduction to 10.0
			; More exp for block since blocking should happen less frequently
			if (armorSkill == Recurved.BlockAvc)
				set defTypeExpReduction to 5.0
			endif

			set damageRatio to (rawDamage / normalizedDamage) / defTypeExpReduction
			
			let defaultUseIncrement := call rcvGetDefaultSkillUseInc armorSkill 0
			set useIncrement to GetSkillUseIncrementC armorSkill 0
			; Calculate how the use increment has been modified in case any softcaps or overrides are applied
			set useExpMod to 1.0
			if (useIncrement > 0 && defaultUseIncrement > 0)
				set useExpMod to useIncrement / defaultUseIncrement
			endif
			; ; Calculate bonus Exp
			set bonusExp to useIncrement * damageRatio * useExpMod
			; Caclulate how many "use increments" need to be added to equal the bonus experience from magicka use
			set bonusUses to bonusExp / useIncrement
			; Increment player skill uses by the amount calculated above
			IncrementPlayerSkillUseC armorSkill 1 bonusUses

			if (Recurved.DebugEnabled || Recurved.OutputFormulas)
				let skillName := ActorValueToStringC armorSkill
				PrintToConsole "recurve: Attacker %n attacked with %g rawDamage resulting in %.2f bonus experience by applying %.2f use increments to skill %z (%g)" attacker rawDamage bonusExp bonusUses skillName armorSkill
				PrintToConsole "recurve: Formula: bonusExp = useIncrement0 * ((rawDamage / normalizedDamage) / defTypeExpReduction) * useExpMod"
				PrintToConsole "recurve:  Result: %.2f = %.2f * ((%.2f / %.2f) / %.2f) * %.2f" bonusExp useIncrement rawDamage normalizedDamage defTypeExpReduction useExpMod
				sv_Destruct skillName
			endif
			let i += 1
		loop
	endif
End