scn rcvApplyActionExtraExp

int skillCode
int skillLevel
array_var levelCurve
int useIncNo
float useIncMult
float weapIncMult
;fatigue
float fatigue
float fatigueUse
; acrobatics dodge fatigue settings
; float fFatigueJumpBase
; float fFatigueJumpMult
; float fPerkJumpFatigueExpertMult
; float fActorStrengthEncumbranceMult
; int encumbrance
; int maxEncumbrance

; inputs
short actionType ; Recurved.ActionXXX type
Begin _Function { actionType }
	if (Recurved.IsOverLeveled)
		return
	endif
	let levelCurve := call rcvGetLevelCurve player.GetLevel 0 0
	set fatigue to player.GetActorValueC 10

	if (actionType == Recurved.ActionAttack || actionType == Recurved.ActionPowerAttack)
		set skillCode to 13
		set skillLevel to player.GetBaseAV3C skillCode
	elseif (actionType == Recurved.ActionCombatDodge || actionType == Recurved.ActionJumpAttack)
		set skillCode to 26
		set skillLevel to player.GetBaseAV3C skillCode
	endif
	; ; Exit if max skill level reached
	; if (skillLevel > 99)
	; 	DebugPrint "recurve: Skill Level for skill %g is already at maximum. No bonus exp will be applied. (skillLevel=%g)" skillCode skillLevel
	; 	return
	; endif
	; Add use increment for the action
	if (actionType == Recurved.ActionAttack)
		set useIncNo to 0
		; Add weapon experience multiplier if both settings are not disabled
		if (Recurved.AthleticsAttackWeaponExpDisabled == 0 && Recurved.WeaponExpNormalizedDisabled == 0)
			set weapIncMult to Recurved.WeaponUseInc1Mult - 1
		endif
		set useIncMult to Recurved.AthleticsAttackExpMulti + weapIncMult
		let fatigueUse := levelCurve["actionFatigueUse"][Recurved.ActionAttack]
		if (Recurved.OutputFormulas && useIncMult > 0)
			PrintToConsole "recurve: Attack Action applying %.2f %v Use %g Increments if remaining fatigue exceeds fatigue use."  useIncMult skillCode (useIncNo + 1)
			PrintToConsole "recurve: Fatigue:  Fatigue Use: %g, Fatigue Remaining: %g" fatigueUse fatigue
			PrintToConsole "recurve: Formula:  [Bonus Use Increments] = Recurved.AthleticsAttackExpMulti + [Normalized Weapon Exp Multiplier]"
			PrintToConsole "recurve:  Result:  %.3f = %.3f + %.3f" useIncMult Recurved.AthleticsAttackExpMulti weapIncMult
		endif
	elseif (actionType == Recurved.ActionPowerAttack)
		set useIncNo to 1
		; Add weapon experience multiplier if both settings are not disabled
		if (Recurved.AthleticsAttackWeaponExpDisabled == 0 && Recurved.WeaponExpNormalizedDisabled == 0)
			set weapIncMult to Recurved.WeaponUseInc2Mult - 1
		endif
		set useIncMult to Recurved.AthleticsAttackExpMulti + weapIncMult
		let fatigueUse := levelCurve["actionFatigueUse"][Recurved.ActionPowerAttack]
		if (Recurved.OutputFormulas && useIncMult > 0)
			PrintToConsole "recurve: Power Attack Action applying %.2f %v Use %g Increments if remaining fatigue exceeds fatigue use."  useIncMult skillCode (useIncNo + 1)
			PrintToConsole "recurve: Fatigue:  Fatigue Use: %g, Fatigue Remaining: %g" fatigueUse fatigue
			PrintToConsole "recurve: Formula:  [Bonus Use Increments] = Recurved.AthleticsAttackExpMulti + [Normalized Weapon Exp Multiplier]"
			PrintToConsole "recurve:  Result:  %.3f = %.3f + %.3f" useIncMult Recurved.AthleticsAttackExpMulti weapIncMult
		endif
	elseif (actionType == Recurved.ActionCombatDodge)
		set useIncNo to 1
		set useIncMult to Recurved.AcrobaticsDodgeExpMulti
		set fatigueUse to (-1)
	elseif (actionType == Recurved.ActionJumpAttack)
		set useIncNo to 1
		; Add weapon experience multiplier if both settings are not disabled
		if (Recurved.AcrobaticsJumpAttackWeaponExpDisabled == 0 && Recurved.WeaponExpNormalizedDisabled == 0)
			set weapIncMult to Recurved.WeaponUseInc1Mult - 1
		endif
		set useIncMult to Recurved.AcrobaticsJumpAttackExpMulti + weapIncMult
		let fatigueUse := levelCurve["actionFatigueUse"][Recurved.ActionJumpAttack]
		if (Recurved.OutputFormulas && useIncMult > 0)
			PrintToConsole "recurve: Attack Action applying %.2f %v Use %g Increments if remaining fatigue exceeds fatigue use."  useIncMult skillCode (useIncNo + 1)
			PrintToConsole "recurve: Fatigue:  Fatigue Use: %g, Fatigue Remaining: %g" fatigueUse fatigue
			PrintToConsole "recurve: Formula:  [Bonus Use Increments] = Recurved.ActionJumpAttack + [Normalized Weapon Exp Multiplier]"
			PrintToConsole "recurve:  Result:  %.3f = %.3f + %.3f" useIncMult Recurved.AcrobaticsJumpAttackExpMulti weapIncMult
		endif
	else
		PrintToConsole "recurve: (WARN) An attempt to add extra experience for unknown action type %g was made." actionType
		return
	endif

	if (fatigueUse > fatigue)
		DebugPrint "recurve: %g fatigue burn for use of skill %v {%g} exceeds current fatigue level of %g. No bonus EXP granted." fatigueUse skillCode skillCode fatigue
		return
	elseif (useIncMult > 0)
		IncrementPlayerSkillUseC skillCode useIncNo useIncMult
		DebugPrint "recurve: Added %.2f type %g use increments to skill %v {%g}. Fatigue Remaining %.2f > Fatigue Burn %.2f" useIncMult useIncNo skillCode skillCode fatigue fatigueUse
	endif
End