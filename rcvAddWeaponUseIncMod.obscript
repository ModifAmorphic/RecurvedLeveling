scn rcvAddWeaponUseIncMod

array_var levelCurve
ref weapon
int weaponType
int skillCode
ref normalizedWeapon
float normalizedDps
float speed
float damage
float dps
float useIncMult
float useIncExp
float expExtraWeaponMulti

Begin _Function { }

    ; Disabled, return
    if (Recurved.WeaponExpNormalizedDisabled)
        return
    endif
    
    set weapon to Player.GetEquippedObject 16
    set weaponType to GetWeaponType weapon
    ; Weapon Types
    ; 0: Blade1H
    ; 1: Blade2H
    ; 2: Blunt1H
    ; 3: Blunt2H
    ; 4: Staff
    ; 5: Bow

    if (weaponType == 4)
        return
    endif
    let levelCurve := call rcvGetLevelCurve Player.GetLevel 0 0
    if (weaponType < 2)
        set skillCode to 14 ; Blade
        let normalizedDps := levelCurve["normalizedWeaponExp"]["melee"]["dps"]
        let normalizedWeapon := levelCurve["normalizedWeaponExp"]["melee"]["weapon"]
    elseif (weaponType < 4)
        set skillCode to 16 ; Blunt
        let normalizedDps := levelCurve["normalizedWeaponExp"]["melee"]["dps"]
        let normalizedWeapon := levelCurve["normalizedWeaponExp"]["melee"]["weapon"]
    elseif (weaponType == 5)
        set skillCode to 28 ; Marksman
        let normalizedDps := levelCurve["normalizedWeaponExp"]["bow"]["dps"]
        let normalizedWeapon := levelCurve["normalizedWeaponExp"]["bow"]["weapon"]
    endif

    set damage to GetAttackDamage weapon
    set speed to GetWeaponSpeed weapon
    set dps to speed * damage
    ; If for some reason normalized DPS was zero (error loading curve or some wierd modded value)
    ; then don't divide by zero
    if (normalizedDps <= 0)
        PrintToConsole "recurve: (WARN) Could not calculate dps from normalized weapon %q%n%q." normalizedWeapon
        return
    endif
    
    set expExtraWeaponMulti to Recurved.ExpExtraWeaponMulti
    if (expExtraWeaponMulti <= 0)
        set expExtraWeaponMulti to 1
    endif
    set useIncMult to dps / normalizedDps * expExtraWeaponMulti

    DebugPrint "recurve: Calculated a bonus experience multiplier of %.2f for equipped weapon %n." useIncMult weapon
    if (Recurved.DebugEnabled || Recurved.OutputFormulas)
        PrintToConsole "recurve: Calculated a bonus experience multiplier of %.2f for equipped weapon %n. Comparison weapon: %n." useIncMult weapon normalizedWeapon
        PrintToConsole "recurve:    Formula: expMultiplier = ((WeaponSpeed * WeaponDamage) / [%n DPS]) * Recurved.ExpExtraWeaponMulti" normalizedWeapon normalizedWeapon
        PrintToConsole "recurve:     Result: %.2f = ((%.2f * %.2f) / %.2f) * %.2f" useIncMult speed damage normalizedDps expExtraWeaponMulti
        set useIncExp to GetSkillUseIncrementC skillCode 0
        PrintToConsole "recurve:    Formula: expPerHit = [Skill %g Use Increment] * expMultiplier" skillCode
        PrintToConsole "recurve:     Result: %.2f = %.2f * %.2f" (useIncExp * useIncMult) useIncExp useIncMult
    endif

	;DebugPrint "recurve: Normalizing weapon type %g. Adding skill use override mod of %.4f for skill %g." weaponType useIncMod skillCode
    ; Remove any existing weapon use overrides
    call rcvDeleteSkillOverrides Recurved.OverrideReasonWeapon

    ; invert the multiplier because the the algo to determine use increments divides by this number instead multiplies
    if (useIncMult)
        ; Add the new override
	    call rcvAddSkillUseIncOverride skillCode useIncMult useIncMult Recurved.OverrideReasonWeapon
    endif
End