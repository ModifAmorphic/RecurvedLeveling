scn rcvApplyBonusMagicaExp

int magicItemType
int spellType
int spellMasteryLevel
int skillMasteryLevel
int school
int magickaCost
int skillCode
int skillLevel
int casterLevel

float masteryReduction
int masteryMagicka
;float expRequired
float baseExpReq
float defaultUseIncrement
float useIncrement
float useModifier
float maxMagickaExp
float bonusExp
float bonusUses
; inputs
ref caster
ref spellCast 
Begin Function { spellCast caster }
	
	if (Recurved.SpellExpFromMagickaDisabled)
		;DebugPrint "recurve: Spell experience from magicka is disabled. SpellExpFromMagickaDisabled=%g" Recurved.SpellExpFromMagickaDisabled
		return
	endif

	set magicItemType to GetMagicItemType spellCast
	; ignore non spell magic items
	if (magicItemType != 1)
		;DebugPrint "recurve: MagicItem is not a spell. SpellType=%g" spellType
		return
	endif
	; only add exp for spell type spells (vs ability, disease, lesser and greater powers)
	set spellType to GetSpellType spellCast
	if (spellType != 0)
		return
	endif

	set spellMasteryLevel to GetSpellMasteryLevel spellCast
	set school to GetSpellSchool spellCast
	set skillCode to school + 20
	set skillLevel to caster.GetBaseAV3C skillCode
	set skillMasteryLevel to caster.GetAVSkillMasteryLevelC skillCode
	; reduce bonus for spells in lower masteries by 1/2 for every mastery under
	let masteryReduction := .5^(skillMasteryLevel - spellMasteryLevel)
	; no bonus for casting spells over the current mastery level
	if (masteryReduction > 1)
		set masteryReduction to 1
	endif
	; get base magicka cost for calculating bonus exp
	set magickaCost to GetSpellMagickaCost spellCast
	set casterLevel to caster.GetLevel

	let baseExpReq := Recurved.Levels[casterLevel - 1]["skills"]["all"][skillCode]["baseExpReq"]
	let defaultUseIncrement := (call rcvGetDefaultSkillUseInc skillCode 1)
	set useIncrement to GetSkillUseIncrementC skillCode 1
	; Calculate how the use increment has been modified in case any softcaps or overrides are applied
	let useModifier := useIncrement / defaultUseIncrement
	; calculate the max bonus exp from magicka
	set maxMagickaExp to baseExpReq / skillLevel * Recurved.SpellExpFromMagickaModifier * Recurved.AllExperienceMultiplier
	; Get magicka for the mastery level and adjust it by the spell cost modifier
	let masteryMagicka := Recurved.SchoolExpMaxMagicka[school][spellMasteryLevel] * (call rcvGetLevelCurve casterLevel 0 0)["magicSchools"][school]["magickaCostMult"]
	; calculate bonusExp by applying the ratio of Magicka Spell cost to total Magicka from Int. Reduce it by masteryReduction 
	;; (if spell is below current mastery), then apply the useModifier in case a softcap or other exp penalty is set
	set bonusExp to maxMagickaExp * (magickaCost / masteryMagicka) * masteryReduction * useModifier
	; Caclulate how many "use increments" need to be added to equal the bonus experience from magicka use
	set bonusUses to bonusExp / useIncrement
	; Increment player skill uses by the amount calculated above
	IncrementPlayerSkillUseC skillCode 1 bonusUses
	if (Recurved.DebugEnabled || Recurved.OutputFormulas)
		PrintToConsole "recurve: Caster %n cast spell %n using skill %g spending %g magicka and gained %.2f bonus experience by applying %.2f use increments." caster spellCast skillCode magickaCost bonusExp bonusUses
		PrintToConsole "recurve:   Formula: maxMagickaExp = (baseExpReq / skillLevel) * Recurved.SpellExpFromMagickaModifier * Recurved.AllExperienceMultiplier"
		PrintToConsole "recurve:         -> %.2f = (%.2f / %g) * %.2f * %.2f" maxMagickaExp baseExpReq skillLevel Recurved.SpellExpFromMagickaModifier Recurved.AllExperienceMultiplier
		PrintToConsole "recurve:   Formula: bonusExp =  maxMagickaExp * (magickaCost / masteryMagicka) * masteryReduction * useModifier"
		PrintToConsole "recurve:         -> %.2f = %.2f * (%g / %g) * %.2f * %.2f" bonusExp maxMagickaExp magickaCost masteryMagicka masteryReduction useModifier
	endif
	
End