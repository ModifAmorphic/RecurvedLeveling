scn rcvRecurveControllerOnUpdate ; Called when there is an "Update" to be processed during a RecurveController GameMode tick

; inputs
short hasRestartedSinceUpdate
short isGameRestarted
short hasLoadedSinceUpdate
short isGameLoaded
short setCurveTwice
Begin _Function { isGameRestarted hasRestartedSinceUpdate isGameLoaded hasLoadedSinceUpdate }
	DebugPrint "recurve: Controller Update: isGameRestarted=%g, isGameLoaded=%g, hasRestartedSinceUpdate=%g, hasLoadedSinceUpdate=%g, isClassSelected=%g, IsTutorialComplete=%g, UpdateFlag=%g, fQuestDelayTime=%.2f, RecurvedControllerInterval=%.2f" isGameRestarted isGameLoaded hasRestartedSinceUpdate hasLoadedSinceUpdate RecurvedController.isClassSelected RecurvedController.IsTutorialComplete RecurvedController.UpdateFlag RecurvedController.fQuestDelayTime Recurved.RecurvedControllerInterval	

	if hasRestartedSinceUpdate
		DebugPrint "recurve: Loading..."
		; Prune events and update event time offsets, Reset GlobalTick back to 1
		call rcvResetGlobalTick
		set RecurvedController.lastEventPurge to 0
		set RecurvedController.lastActionsFoundOn to 0
		set RecurvedController.lastPreLevelUpCheck to 0
		DebugPrint "Increasing Marksman by +5 temporarily."
		;player.ModActorValue "Marksman" 5
	endif
	
	; Load data on game load event
	if hasLoadedSinceUpdate
		call rcvLoadData hasLoadedSinceUpdate hasRestartedSinceUpdate
		; Ensure existing protections are removed in case this was
		; recently disabled
		if Recurved.AttributeGuardDisabled
			call rcvDeleteSkillOverrides Recurved.OverrideReasonFailsafe
			call rcvDeleteSkillOverrides Recurved.OverrideReasonAttributeGuard
		endif
		; Add the GameLoaded event
		call rcvAddEvent Recurved.EventTypeGameLoaded RecurvedController.GlobalTick 0 ar_Null
	endif
	
	; On restarts, subcribe to event handlers
	if hasRestartedSinceUpdate
		; Subscribe to Skill Up Events on restart
		SetEventHandler "OnSkillUp" rcvOnSkillUpSubscriber
		SetEventHandler "OnScriptedSkillUp" rcvOnScriptedSkillUpSubscriber
		SetEventHandler "OnActorEquip" rcvOnActorEquipSubscriber
		DebugPrint "recurve: Subscribed event handlers."
		; add the restarted event
		call rcvAddEvent Recurved.EventTypeGameRestarted RecurvedController.GlobalTick 0 ar_Null
	endif

	; Handle overleveling. Reset progress back to max progress for current level
	;; TODO: Why do I do this? Don't remember. Can I stop? Seems like unneeded complication
	; if (Recurved.DelayedResetLevelProgress > 0)
	; 	SetPCMajorSkillUps (GetGameSetting "iLevelUpSkillCount")
	; 	DebugPrint "recurve: Reset level progress to level maximum."
	; 	set Recurved.DelayedResetLevelProgress to 0
	; endif

	; Handle Player pre and post level up 
	if Eval(call rcvHasEventAfter Recurved.EventTypeLevelUpProgressReached RecurvedController.lastPreLevelUpCheck)
		call rcvSetLevelProgress 0
		set RecurvedController.lastPreLevelUpCheck to RecurvedController.GlobalTick
	endif
	
	if (RecurvedController.IsPlayerLeveling == 1)
		set Recurved.IsOverLeveled to 0
		call rcvProcessLevelUp
	endif
	
	; Reset Skill Use Increments to defaults before applying latest level curve
	DebugPrint "recurve: Resetting Skill Use Increments to Modified Default Skill Use Increments"
	call rcvSetSkillUseIncrements (call rcvGetDefaultSkillUseIncs 0)
	if (Recurved.IsOverLeveled == 0)
		; Reset overrides
		call rcvResetSkillUseOverrides
	endif
	; Set level up requirements, attribute gains and required skill increase for the current level
	;; force rebuild of level curve data
	call rcvSetLevelCurve (call rcvGetLevelCurve player.GetLevel 1 0) Recurved.SkillUseOverrides
	
	;  ## overrides ##
	; Apply overlevel prevention if needed
	if (Recurved.AttributeGuardDisabled == 0 && Recurved.IsOverLeveled == 0)
		let Recurved.IsOverLeveled := call rcvPreventOverLevel 0 0
		set setCurveTwice to 1
	endif
	
	; if overlevel protection not enabled then add other overrides
	if (Recurved.IsOverLeveled == 0)
		; Add weapon use mod overrides
		call rcvAddWeaponUseIncMod
		; set Recurved.WeaponEquipped to 0
		call rcvUpdateAttributeGuards ((call rcvGetMajorSkills)[0]["code"]) 0
		set setCurveTwice to 1
	endif
	
	; Reapply level curve with potential changes
	if (setCurveTwice)
		call rcvSetLevelCurve (call rcvGetLevelCurve player.GetLevel 0 0) Recurved.SkillUseOverrides
	endif
	
	; reset variables
	set RecurvedController.isSleepMenuInit to 0
	set RecurvedController.isLevelMenuInit to 0
	set RecurvedController.IsPlayerLeveling to 0
	set RecurvedController.UpdateFlag to 0

	if hasLoadedSinceUpdate
		PrintToConsole "Recurved Levels Initialized and Active."
	endif
	; Add event so other quests know the controller finished an update
	call rcvAddEvent Recurved.EventTypeControllerUpdate RecurvedController.GlobalTick 0 ar_Null
End