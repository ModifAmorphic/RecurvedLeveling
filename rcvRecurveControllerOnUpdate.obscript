scn rcvRecurveControllerOnUpdate ; Called when there is an "Update" to be processed during a RecurveController GameMode tick

short isOverLevel

; inputs
short hasRestartedSinceUpdate
short isGameRestarted
short hasLoadedSinceUpdate
short isGameLoaded
Begin _Function { isGameRestarted hasRestartedSinceUpdate isGameLoaded hasLoadedSinceUpdate }
	DebugPrint "recurve: Flow control: isGameRestarted=%g, isGameLoaded=%g, hasRestartedSinceUpdate=%g, hasLoadedSinceUpdate=%g, isClassSelected=%g, IsTutorialComplete=%g, UpdateFlag=%g" isGameRestarted isGameLoaded hasRestartedSinceUpdate hasLoadedSinceUpdate RecurvedController.isClassSelected RecurvedController.IsTutorialComplete RecurvedController.UpdateFlag
	if hasLoadedSinceUpdate
		call rcvSetConstants
		call rcvLoadIni
		call rcvSetConstants
		DebugPrint "recurve: Flow control: isGameRestarted=%g, isGameLoaded=%g, hasRestartedSinceUpdate=%g, hasLoadedSinceUpdate=%g, isClassSelected=%g, IsTutorialComplete=%g, UpdateFlag=%g" isGameRestarted isGameLoaded hasRestartedSinceUpdate hasLoadedSinceUpdate RecurvedController.isClassSelected RecurvedController.IsTutorialComplete RecurvedController.UpdateFlag
		; Prune events and update event time offsets, Reset GlobalTick back to 0
		call rcvResetGlobalTick
	endif
	
	; If tutorial is not yet flagged as complete, then check to see if that's changed
	if (RecurvedController.IsTutorialComplete == 0)
		let RecurvedController.IsTutorialComplete := !(call rcvGetIsInTutorial isGameLoaded)
		if (RecurvedController.IsTutorialComplete == 0)
			return  ; Exit early if still in tutorial!!
		endif
	endif
	;;; End Tutorial Check

	if hasRestartedSinceUpdate
		DebugPrint "recurve: Loading..."
	endif
	
	; Load data on game load event
	if hasLoadedSinceUpdate
		call rcvLoadData hasLoadedSinceUpdate hasRestartedSinceUpdate
		; Ensure existing protections are removed in case this was
		; recently disabled
		if Recurved.AttributeProtectionDisabled
			call rcvDeleteSkillOverrides Recurved.OverrideReasonAttributeProtection
		endif
		; Add the GameLoaded event
		call rcvAddEvent Recurved.EventTypeGameLoaded RecurvedController.GlobalTick
	endif
	
	; On restarts, subcribe to event handlers
	if hasRestartedSinceUpdate
		; Subscribe to Skill Up Events on restart
		SetEventHandler "OnSkillUp" rcvOnSkillUpSubscriber
		SetEventHandler "OnScriptedSkillUp" rcvOnScriptedSkillUpSubscriber
		SetEventHandler "OnMagicApply" rcvOnMagicApplySubscriber "second"::PlayerRef
		;; Seems to cause crashes. Doesn't seem worth it to avoid a few
		;; strings in save files.
		; SetEventHandler "SaveGame" rcvSaveGameSubscriber
		SetEventHandler "OnActorEquip" rcvOnActorEquipSubscriber
		;SetEventHandler "OnHit" rcvOnHitSubscriber "first"::PlayerRef
		SetEventHandler "OnHealthDamage" rcvOnHealthDamageSubscriber ;"object"::PlayerRef
		DebugPrint "recurve: Subscribed event handlers."
		; add the restarted event
		call rcvAddEvent Recurved.EventTypeGameRestarted RecurvedController.GlobalTick
	endif

	; Handle overleveling. Reset progress back to max progress for current level
	if (Recurved.DelayedResetLevelProgress > 0)
		SetPCMajorSkillUps (GetGameSetting "iLevelUpSkillCount")
		DebugPrint "recurve: Reset level progress to level maximum."
		set Recurved.DelayedResetLevelProgress to 0
	endif

	; Handle Player pre and post level up 
	if Eval(call rcvHasEventAfter Recurved.EventTypeLevelUpProgressReached RecurvedController.lastPreLevelUpCheck)
		call rcvSetLevelProgress 0
	endif
	set RecurvedController.lastPreLevelUpCheck to RecurvedController.GlobalTick
	if (RecurvedController.IsPlayerLeveling == 1)
		call rcvProcessLevelUp
	endif
	
	; Reset Skill Use Increments to defaults before applying latest level curve
	DebugPrint "recurve: Resetting Skill Use Increments"
	call rcvSetSkillUseIncrements Recurved.DefaultSkillUseIncrements
	; Reset overrides
	let Recurved.SkillUseOverrides := ar_Construct "Array"
	; Set level up requirements, attribute gains and required skill increase for the current level
	;; force rebuild of level curve data
	call rcvSetLevelCurve (call rcvGetLevelCurve player.GetLevel 1) Recurved.SkillUseOverrides
	
	;  ## overrides ##
	; Apply overlevel prvention if needed
	if (Recurved.AttributeProtectionDisabled == 0)
		let isOverLevel := call rcvPreventOverLevel 0 0
	endif
	
	; if overlevel protection not enabled then add other overrides
	if (isOverLevel == 0)
		; Add weapon use mod overrides
		call rcvAddWeaponUseIncMod
		; set Recurved.WeaponEquipped to 0
		call rcvAddSkillIncreaseProtection ((call rcvGetMajorSkills)[0]["code"]) 0
	endif
	
	; Reapply level curve with potential changes
	call rcvSetLevelCurve (call rcvGetLevelCurve player.GetLevel 0) Recurved.SkillUseOverrides
	
	; reset variables
	set RecurvedController.isSleepMenuInit to 0
	set RecurvedController.isLevelMenuInit to 0
	set RecurvedController.IsPlayerLeveling to 0
	set RecurvedController.UpdateFlag to 0

	if hasLoadedSinceUpdate
		PrintToConsole "Recurved Levels Initialized and Active."
	endif
End