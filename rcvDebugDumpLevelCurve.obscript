scn rcvDebugDumpLevelCurve

int i
int index

;input character level
int level
Begin Function { level } ; Dumps Recurved.LevelCurves Array
	set index to level - 1

	if Eval (index > ar_Size Recurved.LevelCurves)
		DebugPrint "recurve: Unable to dump Recurved.LevelCurves[%g] for level %g. Level does not exist in Recurved.LevelCurves.%n" index level
		return
	endif
	DebugPrint "recurve: ######## Dumping Recurved.LevelCurves[%g] #######" index
	ar_Dump Recurved.LevelCurves[index]
	set i to 0
	DebugPrint "recurve: Dumping Recurved.LevelCurves[%g].iLevelUpMults:" index
	while (i < ar_size Recurved.LevelCurves[index]["iLevelUpMults"])
		ar_Dump Recurved.LevelCurves[index]["iLevelUpMults"][i]
		let i += 1
	loop
	set i to 0
	DebugPrint "recurve: Dumping Recurved.LevelCurves[%g].skills:" index
	while (i < ar_size Recurved.LevelCurves[index]["skills"])
		ar_Dump Recurved.LevelCurves[index]["skills"][i]
		DebugPrint "recurve: useInc:"
		ar_Dump Recurved.LevelCurves[index]["skills"][i]["useInc"]
		let i += 1
	loop
	set i to 0

	DebugPrint "recurve: Dumping Recurved.LevelCurves[%g][%qnormalizedWeaponExp%q][%qmelee%q]:" index
	ar_Dump Recurved.LevelCurves[index]["normalizedWeaponExp"]["melee"]
	DebugPrint "recurve: Dumping Recurved.LevelCurves[%g][%qnormalizedWeaponExp%q][%qbow%q]:" index
	ar_Dump Recurved.LevelCurves[index]["normalizedWeaponExp"]["bow"]
	DebugPrint "%nrecurve: ######## End Dumping Recurved.LevelCurves[%g] #######" index
End