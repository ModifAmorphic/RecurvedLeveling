scn rcvRecurveMessenger

float fQuestDelayTime
int lastProtectionMessageTick
short isGameLoaded

; Flags for showing tutorial messages only once
short TutorialAttributeProtectionShown
short TutorialAttributeFailsafeShown
short TutorialOverlevelShown

array_var prevPenalizedAttributes
array_var latestPenalizedAttributes
array_var updatedPenalizedAttributes
; array_var ProtectedSkillsUse

Begin _GameMode
	set fQuestDelayTime to 2
	
	set isGameLoaded to GetGameLoaded
	; Allow other quests to start before checking on messaging
	if (isGameLoaded)
		let lastProtectionMessageTick := 0
		return
	endif

	if (TutorialOverlevelShown == 0)
		if Eval((Recurved.ExcessAttributeProgress + 1) == Recurved.LevelCurves[player.GetLevel]["iLevelUpSkillCount"])
			set TutorialOverlevelShown to 1
			call rcvShowOverlevelPreventionMessageBox Recurved.ExcessAttributeProgress
			return
		endif
	endif

	if (TutorialAttributeProtectionShown == 0)
		if (Recurved.AttributeFailsafeEnabled == 0)
			if Eval (call rcvGetIsIncreaseProtectionEnabled)
				set TutorialAttributeProtectionShown to 1
				call rcvShowAttributeProtectionMessageBox Recurved.TutorialAttributeProtectionMessage Recurved.MinimumMaxedAttributes
				return
			endif
		endif
	endif

	if (TutorialAttributeFailsafeShown == 0)
		if (Recurved.AttributeFailsafeEnabled)
			set TutorialAttributeFailsafeShown to 1
			call rcvShowAttributeProtectionMessageBox Recurved.TutorialAttributeFailsafeMessage Recurved.MinimumMaxedAttributes
			return
		endif
	endif

	let latestPenalizedAttributes := call rcvFindSkillUseOverridesAttributes (Recurved.SkillUseOverrideReasons["AttributeProtection"])
	; If it's been 30 seconds of game time (.2 ticks * 150 = 30) since the last tick, or this is the first time
	; then show the protected skill message
	if Eval (RecurvedController.GlobalTick - lastProtectionMessageTick > 150 || lastProtectionMessageTick == 0)
		if Eval((ar_Size latestPenalizedAttributes) > 0)
			if Eval ((ar_size prevPenalizedAttributes) < 1)
				let prevPenalizedAttributes := ar_Construct Array
			endif
			DebugPrint "#### Messenger Dump Array Before - prevPenalizedAttributes"
			ar_Dump prevPenalizedAttributes
			DebugPrint "#### End Messenger Dump Before - prevPenalizedAttributes"
			let updatedPenalizedAttributes := call rcvFindUpdatedAttributeSkills prevPenalizedAttributes latestPenalizedAttributes
			if Eval ((ar_Size updatedPenalizedAttributes) > 0)
				set lastProtectionMessageTick to RecurvedController.GlobalTick
				call rcvShowAttributeProtectionMessage updatedPenalizedAttributes
			endif
			let updatedPenalizedAttributes := ar_Construct Array
			let prevPenalizedAttributes := latestPenalizedAttributes
			DebugPrint "#### Messenger Dump Array After - prevPenalizedAttributes"
			ar_Dump prevPenalizedAttributes
			DebugPrint "#### End Messenger Dump After - prevPenalizedAttributes"
		endif
	endif
	let prevPenalizedAttributes := latestPenalizedAttributes
	let latestPenalizedAttributes := ar_Construct Array
end