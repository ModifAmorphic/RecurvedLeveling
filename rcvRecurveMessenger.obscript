scn rcvRecurveMessenger

float fQuestDelayTime
short isWaiting
int waitTick

; Flags for showing tutorial messages only once
short TutorialAttributeGuardShown
short TutorialAttributeFailsafeShown
short TutorialOverlevelShown

; Message Tracking
; to avoid constantly checking for skill level / softcap / protection changes when none have have occured
;; Amount of time to wait between sending messages
int MessageWaitTicks
; Only show a message if the change triggering the message happened withing the last X ticks
int MessageTickWindow
;; Last time a message worthy event was found
int LastMsgEventFoundTick
;; Last time the Attribute Guard Message was shown
int LastGuardMsgShownTick
;; Last time the Soft Cap Message was shown
int LastSoftCapMsgShownTick

array_var PrevPenalizedAttributes
array_var PrevSoftcapped

; Tracks last time a skill check happened
int LastEffectEventFoundTick

; Flags set whenever an effects are added. Used to clean up effects if effects where disabled
short IsEffectsAdded
short IsAttributeEffectsAdded
short IsSoftcapEffectsAdded

;Effect Constants
int EffectOverlevel
int EffectAttributesFailsafe
int EffectAttributeGuard
int EffectSoftcap

short isFirstPass

; Effects Vars
array_var Effects
ref LastConfiguredMagicEffect
short ForceEffectsRefresh

Begin _GameMode
	set fQuestDelayTime to 2
	
	; When game load event occurs, wait for controller to finish it's first update
	if (GetGameLoaded)
		set isWaiting to 1
		set waitTick to RecurvedController.GlobalTick
		if (GetGameRestarted)
			let PrevPenalizedAttributes := ar_Construct "Array"
			let PrevSoftcapped := ar_Construct "Array"
			set waitTick to 0
		endif
		return
	endif

	if (isWaiting)
		if Eval(call rcvHasEventAfter Recurved.EventTypeControllerUpdate waitTick)
			; disable waiting flag so this block get's skipped from now on
			set isWaiting to 0
			set isFirstPass to 1
			PrintToConsole "recurve: RecurvedMessenger Quest Script starting at global tick %g." RecurvedController.GlobalTick
		else
			return
		endif
	endif

	if (isFirstPass)
		; Only show a message every 15 seconds
		let MessageWaitTicks := call rcvConvertSecondsToTicks Recurved.MessageWaitSeconds
		; only show a message 
		let MessageTickWindow := call rcvConvertSecondsToTicks Recurved.MessageWindowSeconds
		set LastMsgEventFoundTick to 0
		set LastGuardMsgShownTick to 0
		set LastSoftCapMsgShownTick to 0
		set LastEffectEventFoundTick to 0
		set isFirstPass to 1
		DebugPrint "recurve: Recurved Messenger Initialized"
		set ForceEffectsRefresh to 1
		
		;; If DARK effect configured, then change the name and icon
		if Eval((sv_Compare "DARK" Recurved.MagicEffectDisplayAbbr) == 0)
			;let iconPath := GetMagicEffectIcon DRSK
			DebugPrint "recurve: DARK effect configured. Hijacking DARK effect for Recurved Events."
			SetMagicEffectName "Recurved Effects" DARK
			SetMagicEffectIcon (GetMagicEffectIcon DRSK) DARK
			SetMagicEffectIsDetrimental 1 DARK
			SetMagicEffectSchool 0 DARK
		endif
		set isFirstPass to 0
	endif
	
	call rcvProcessEffects ForceEffectsRefresh
	; Refreshing needs to happen in 2 passes otherwise the effects won't be registered correctly.
	;; - 1st pass clears all effects and sets ForceEffectsRefresh to 2.
	;; - 2nd pass adds effects and sets ForceEffectsRefresh to 0.
	if (ForceEffectsRefresh == 1 && Recurved.RecurvedEffectsDisabled == 0)
		set ForceEffectsRefresh to 2
	else
		set ForceEffectsRefresh to 0
	endif

	; Only show messages if enabled
	if (Recurved.RecurvedMessagesDisabled == 0)
		call rcvProcessMessages
	endif

end

Begin _MenuMode 1009
	call rcvProcessEffects 0
End
Begin _MenuMode 1014
	call rcvProcessEffects 0
End
Begin _MenuMode 1028
	call rcvProcessEffects 0
End
Begin _MenuMode 1034
	call rcvProcessEffects 0
End
Begin _MenuMode 1035
	call rcvProcessEffects 0
End
Begin _MenuMode 1040
	call rcvProcessEffects 0
End