scn rcvRecurveController

float fQuestDelayTime

; Ticks since the game was restarted
int GlobalTick
int lastEventPurge        ; Tracks last time events array was last purged
int lastActionsFoundOn      ; ticks since last check for actionable events
; public used vars
short UpdateFlag          ; For other scripts to request an update to run on next tick
short IsTutorialComplete  ; Only updated once, after tutorial is found to be completed

; Flags for flow control
;; Flags for only running code once on menus opening
short isSleepMenuInit
short isLevelMenuInit
short IsPlayerLeveling
;; flags for tracking game restart and reloads
short hasRestartedSinceUpdate
short hasLoadedSinceUpdate
short isGameRestarted
short isGameLoaded

int lastPreLevelUpCheck ; For tracking a PreLevelUp event

; Tutorial function vars
short isTutorialCheckActive
short isTutorialQuestPassed
short isClassSelected

; float secondsPassed

; Sleep Menu
;; Not needed anymore, but left in as a way to cause an update manually.
begin MenuMode 1012

	if (isSleepMenuInit)
		return
	endif
	
	; set so this code only gets executed once per menu open
	set isSleepMenuInit to 1
	; Set UpdateFlag flag so next _GameMode tick processes
	set UpdateFlag to 1

end

; Level Up Menu
begin _MenuMode 1027
	if (isLevelMenuInit)
		return
	endif
	; Switch to frame updates until level up menu is closed
	set fQuestDelayTime to .001
	; Set UpdateFlag flag so next _GameMode tick processes
	set UpdateFlag to 1
	; track internally for the next game mode tick
	set IsPlayerLeveling to 1
	; set so this code only gets executed once per menu open
	set isLevelMenuInit to 1
	DebugPrint "recurve: Level Up Menu detected. Capturing Current level attributes and level curves."
	if Recurved.DebugEnabled
		DebugPrint "recurve: Dumping Level and Level Curves"
		DebugPrint "recurve: ####### Level %g Dump (Before Level Up) ##########" player.GetLevel
		call rcvDebugDumpLevel player.GetLevel
		call rcvDebugDumpLevelCurve player.GetLevel
		DebugPrint "recurve: ####### End Level %g Dump (Before Level Up) ##########" player.GetLevel
	endif
end

Begin _GameMode
	set isGameRestarted to GetGameRestarted
	set isGameLoaded to GetGameLoaded

	; set secondsPassed to GetSecondsPassed
	; DebugPrint "recurve: %.2f seconds passed since last GlobalTick %g." secondsPassed RecurvedController.GlobalTick
	; Runs every tick
	if Eval((call rcvRecurveControllerOnTick isGameRestarted isGameLoaded))
		; rcvRecurveControllerOnTick determined there was an update pending.
		call rcvRecurveControllerOnUpdate isGameRestarted hasRestartedSinceUpdate isGameLoaded hasLoadedSinceUpdate
	endif
	if (GlobalTick % Recurved.EventsProcessingTickModulus)
		if Eval(call rcvApplyActionEventsExp lastActionsFoundOn)
			set lastActionsFoundOn to GlobalTick
		else ; If nothing found, still advance found on to avoid searching through the same events over and over.
			set lastActionsFoundOn to GlobalTick - 1 ; Minus one in case the event was added after the check, but before the next tick
		endif
	endif

end