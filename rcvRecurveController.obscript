scn rcvRecurveController

float fQuestDelayTime

; Ticks since the game was restarted
int GlobalTick
; public used vars
short HasUpdate
short IsIniLoadNeeded

; Flags for flow control
short isSleepMenuInit
short isLevelMenuInit
short isPlayerLeveled
short isGameRestarted
short isGameLoaded
short isGameRestartedPeek
short isGameLoadedPeek
short IsTutorialActive
short isTutorialQuestPassed
short isClassSelected
short isOverLevel

; Sleep Menu
begin MenuMode 1012

	if (isSleepMenuInit)
		return
	endif

	set isSleepMenuInit to 1
	set HasUpdate to 1

end

; Level Up Menu
begin MenuMode 1027
	if (isLevelMenuInit)
		return
	endif
	
	set HasUpdate to 1
	set isPlayerLeveled to 1
	set isLevelMenuInit to 1
	DebugPrint "recurve: Level Up Menu detected. Capturing Current level attributes and level curves."
	if Recurved.DebugEnabled
		call rcvDebugDumpLevel player.GetLevel
		call rcvDebugDumpLevelCurve player.GetLevel
	endif
end

; Begin MenuMode 1030

; End

; Begin MenuMode 1033

; End

Begin _GameMode
	set GlobalTick to GlobalTick + 1
	set isGameRestartedPeek to GetGameRestarted
	set isGameLoadedPeek to GetGameLoaded

	; Preserve load and restart statuses for later
	; if the tutorial is active
	if IsTutorialActive == 0 || isGameRestartedPeek
		set isGameRestarted to isGameRestartedPeek
	endif
	if IsTutorialActive == 0 || isGameLoadedPeek
		set isGameLoaded to isGameLoadedPeek
	endif

	; Run any debug commands that may be pending
	if Recurved.DebugEnabled
		if (isGameLoadedPeek)
			set Recurved.SlowAttributeSkills to -1
		endif
		call rcvDebugRunCommands
	endif
	; Exit early if new updates or game loads
	if isGameLoaded == 0 && HasUpdate == 0 && IsIniLoadNeeded == 0
		return
	endif

	if isGameRestartedPeek
		set fQuestDelayTime to .2
	endif
	if isGameLoadedPeek || IsIniLoadNeeded
		set IsIniLoadNeeded to 0
		set GlobalTick to 0
		call rcvLoadIni
		if Recurved.DebugEnabled
			SetDebugMode 1
		endif
		DebugPrint "recurve: Flow control: isGameRestartedPeek=%g, isGameLoadedPeek=%g, isGameRestarted=%g, isGameLoaded=%g, isClassSelected=%g, IsTutorialActive=%g, HasUpdate=%g" isGameRestartedPeek isGameLoadedPeek isGameRestarted isGameLoaded isClassSelected IsTutorialActive HasUpdate
		
		; ; ; one time fix
		; DebugPrint "Fixing Health Values"
		; let Recurved.Levels[player.getlevel - 1]["health"] := 320
		; let Recurved.Levels[player.getlevel - 1]["attributes"][Recurved.EnduranceAvc]["normalizedValue"] := 100
		; DebugPrint "Fixed Current Level Health: %g" (Recurved.Levels[player.getlevel - 1]["health"])
	endif
	;;; Start Tutorial Check
	;;;; 1. If the player started a new game, wait for a valid class to be selected
	;;;; 2. If #1 happened, then wait for the player to leave the sewers
	;;;; 3. If neither were true, then continue
	; Wait for a class to be selected
	if isClassSelected == 0
		if call rcvHasTutorialClass
			set IsTutorialActive to 1
			if isGameLoadedPeek
				DebugPrint "recurve: Character's class is CharactergenClass. Setting IsTutorialActive to 1."
			endif
			return
		else
			set isClassSelected to 1
		endif
	endif
	
	; Catch active tutorial for existing saves still in tutorial before this mod was added
	if isTutorialQuestPassed == 0
		if call rcvHasTutorialQuest
			set IsTutorialActive to 1
			DebugPrint "recurve: Totorial quest found in character's quests."
		else
			DebugPrint "recurve: Tutorial quest marked complete."
			set IsTutorialActive to 0 
			set isTutorialQuestPassed to 1
		endif
	endif

	; If Tutorial was active, wait until player is outside sewers
	if IsTutorialActive 
		if Player.IsInInterior == 0
			set IsTutorialActive to 0
			set isTutorialQuestPassed to 1
			set isGameRestarted to 1
			set isGameLoaded to 1
			DebugPrint "recurve: Tutorial complete."
		else
			if isGameLoadedPeek
				PrintToConsole "recurve: Tutorial is active. Delaying level scaling changes until tutorial is finished."
			endif
			return
		endif
	endif
	;;; End Tutorial Check

	if isGameRestarted
		DebugPrint "recurve: Loading..."
	endif
	
	; Load data on game load event
	if isGameLoaded
		call rcvLoadData isGameLoaded isGameRestarted
		; Ensure existing protections are removed in case this was
		; recently disabled
		if Recurved.AttributeProtectionDisabled
			call rcvRemoveSkillOverageProtection
		endif
	endif
	
	if isGameRestarted
		; Subscribe to Skill Up Events on restart
		SetEventHandler "OnSkillUp" rcvOnSkillUpSubscriber
		SetEventHandler "OnScriptedSkillUp" rcvOnScriptedSkillUpSubscriber
		SetEventHandler "OnMagicApply" rcvOnMagicApplySubscriber "second"::PlayerRef
		;; Seems to cause crashes. Doesn't seem worth it to avoid a few
		;; strings in save files.
		; SetEventHandler "SaveGame" rcvSaveGameSubscriber
		SetEventHandler "OnActorEquip" rcvOnActorEquipSubscriber
		;SetEventHandler "OnHit" rcvOnHitSubscriber "first"::PlayerRef
		SetEventHandler "OnHealthDamage" rcvOnHealthDamageSubscriber ;"object"::PlayerRef
		
		DebugPrint "recurve: Subscribed event handlers."
	endif

	; Handle overleveling. Reset progress back to max progress for current level
	if (Recurved.DelayedResetLevelProgress > 0)
		SetPCMajorSkillUps (GetGameSetting "iLevelUpSkillCount")
		DebugPrint "recurve: Reset level progress to level maximum."
		set Recurved.DelayedResetLevelProgress to 0
	endif

	; Handle Player level up 
	if (isPlayerLeveled == 1)
		call rcvProcessLevelUp
	endif
	
	; Reset Skill Use Increments Prior to reconfiguring
	DebugPrint "recurve: Resetting Skill Use Increments"
	call rcvSetSkillUseIncrements Recurved.DefaultSkillUseIncrements
	; Reset overrides
	let Recurved.SkillUseOverrides := ar_Construct "Array"
	; Configure attribute gains and required skill increase for the current level
	call rcvSetLevelCurve (call rcvGetLevelCurve player.GetLevel 1) Recurved.SkillUseOverrides
	;  ## overrides ##
	; Apply overlevel prvention if needed
	if (Recurved.AttributeProtectionDisabled == 0)
		let isOverLevel := call rcvPreventOverLevel 0 0
	endif
	
	; if overlevel protection not enabled then add other overrides
	if (isOverLevel == 0)
		; Add weapon use mod overrides
		call rcvAddWeaponUseIncMod
		; set Recurved.WeaponEquipped to 0
		call rcvAddSkillIncreaseProtection ((call rcvGetMajorSkills)[0]["code"]) 0
	endif
	; Reapply level curve with potential changes
	call rcvSetLevelCurve (call rcvGetLevelCurve player.GetLevel 0) Recurved.SkillUseOverrides
	
	; reset variables
	set isSleepMenuInit to 0
	set isLevelMenuInit to 0
	set isPlayerLeveled to 0
	set HasUpdate to 0
	set IsIniLoadNeeded to 0

	if isGameLoaded
		PrintToConsole "Recurved Levels Initialized and Active."
	endif
end