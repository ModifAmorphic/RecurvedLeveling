scn rcvGetWeaponUseExpModNormalized

ref targetWeapon


int weaponType
int skillCode
float tSpeed
float useInc
float useIncMod

; inputs
float normalizeToSpeed
; outputs
array_var useIncNormalized
Begin _Function { normalizeToSpeed }
    set targetWeapon to Player.GetEquippedObject 16
    ; set sDamage to sourceWeapon.GetWeaponDamage
    DebugPrint "normalizeToSpeed=%.2f" normalizeToSpeed
    set weaponType to GetWeaponType targetWeapon
    DebugPrint "weaponType=%g" weaponType
    ; Weapon Types
    ; 0: Blade1H
    ; 1: Blade2H
    ; 2: Blunt1H
    ; 3: Blunt2H
    ; 4: Staff
    ; 5: Bow

    if (weaponType < 2)
        set skillCode to 17 ; Blade
    elseif (weaponType < 5)
        set skillCode to 16 ; Blunt
    elseif (weaponType == 5)
        set skillCode to 28 ; Marksman
    endif

    DebugPrint "skillCode=%g" skillCode
    let useInc := Recurved.DefaultSkillUseIncrements[skillCode][0]
    let useIncNormalized := ar_Construct "StringMap"
    ; Don't normalize Marksman. No speed difference.
    if (weaponType == 28)
        let useIncNormalized["useInc"] := useInc
        let useIncNormalized["useIncMod"] := 1
        SetFunctionValue useIncNormalized
        return
    endif
    
    DebugPrint "useInc=%.2f" useInc
    let tSpeed := GetWeaponSpeed targetWeapon
    DebugPrint "tSpeed=%.2f" tSpeed
    let useIncNormalized["useInc"] := useInc / (tSpeed / normalizeToSpeed)
    let useIncNormalized["useIncMod"] := tSpeed / normalizeToSpeed
    SetFunctionValue useIncNormalized
    DebugPrint "Normalized weapon experience from %.4f to %.4f with normalization amount %.4f." useInc useIncNormalized["useInc"] useIncNormalized["useIncMod"]
End